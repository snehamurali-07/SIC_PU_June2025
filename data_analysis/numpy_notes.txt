import numpy as np

array1 = np.zeros(3)
print(f'Array1 = {array1}')

array2 = np.zeros((1, 4))
print(f'Array2 = {array2}')

array3 = np.zeros((2, 5))
print(f'Array3 = {array3}')
---------------------------------------------
import numpy as np

array1 = np.zeros(3)
array2 = np.zeros((1, 4))
array3 = np.zeros((2, 5))

print(array1[0], array1[2])
print(array2[0][0], array2[0][3])
print(array3[1][0], array3[1][3])
-------------------------------------------------
import numpy as np

array1 = np.zeros(3)
array2 = np.zeros((1, 4))
array3 = np.zeros((2, 5))

print(array1[4]) # IndexError
print(array1[0][0]) # SyntaxError array1 is not 2D array
print(array2[2][0]) # IndexError
print(array2[1][0]) # IndexError
print(array3[3][3]) # IndexError
--------------------------------------------
import numpy as np

array1 = np.zeros(3)
array2 = np.zeros((1, 4))
array3 = np.zeros((2, 5))

print(type(array1))
print(type(array2))
print(type(array1[0]))
print(type(array2[0]))
print(type(array2[0][0]))
----------------------------------------------
import numpy as np

array1 = np.full((2, 4), 5)
print(array1)
array2 = np.full((1,5), 10)
# Here array2 is still a ndarray
print(array2)

array1 = np.full((2, 4), 5, dtype=int)
array1 = np.full((2, 4), 5, dtype=np.float64)
------------------------------------------------
import numpy as np
# arange()

array1 = np.arange(10)
array2 = np.arange(10, 20)
array3 = np.arange(10, 30, 3)

print(type(array1))
print(array1)
print(array2)
print(array3)
------------------------------------------------------
import numpy as np
# ones()

array1 = np.ones(10)
array2 = np.ones((2, 8))
array3 = np.ones((3, 5))

print(type(array1))
print(array1)
print(array2)
print(array3)
---------------------------------------------
import numpy as np

vector = np.arange(5)
print('Vector shape:', vector.shape)

matrix = np.ones([3, 2])
print('Matrix:', matrix)
print('Matrix shape:', matrix.shape)

tensor = np.zeros([2, 3, 3])
print('Tensor:', tensor)
print("Tensor shape:", tensor.shape)
-------------------------------------------------
import numpy as np

arr = np.arange(1, 10)
print(arr, '\n')

# Reshape to 3x3 matrix
arr = arr.reshape(3, 3)
print(arr, '\n')

# Reshape back to the original size
arr = arr.reshape(9) # generates 1D array
print(arr)

arr = arr.reshape(1, 9) # generates 2D array
print(arr)

arr = arr.reshape(2, 5) # ValueError
print(arr)
-----------------------------------------------------
import numpy as np

arr1 = np.arange(12)

arr2 = arr1.reshape(2, 6)
arr3 = arr1.reshape(6, 2)
arr4 = arr1.reshape(3, 4)
arr5 = arr1.reshape(12, 1)
arr6 = arr1.reshape(4, 3)

print('Arr1:\n', arr1)
print('Arr2:\n', arr2)
print('Arr3:\n', arr3)
print('Arr4:\n', arr4)
print('Arr5:\n', arr5)
print('Arr6:\n', arr6)
-------------------------------------------------------
import numpy as np

arr = np.arange(1, 10).reshape(3, -1) # Here python infers/decides the number of columns by itself.
print(arr)
-------------------------------------------------------
import numpy as np

arr1 = np.arange(1, 10) #arange always generates 1D array
arr2 = np.arange(2, 25, 2)
arr3 = arr1.reshape(3, -1) # Reshape generates 1D, 2D and 3D arrays and so on
arr4 = arr2.reshape(4, -1)
arr5 = arr2.reshape(2, -1)
arr6 = arr2.reshape(3, -1)
arr7 = arr2.reshape(-1, 4) # Numpy predicts and fixes number of rows
arr8 = arr2.reshape(-1, -1) #ValueError. Can only specify one unknown dimension

print('Arr1:\n', arr1)
print('Arr2:\n', arr2)
print('Arr3:\n', arr3)
print('Arr4:\n', arr4)
print('Arr5:\n', arr5)
print('Arr6:\n', arr6)
print('Arr7:\n', arr7)
print('Arr8:\n', arr8)
---------------------------------------------------------
import numpy as np

array1 = np.array([1, 3, 5, 0, 2, 3, 4, 5, 13, 17, 23, 29])
print(array1.shape)
print(type(array1))
print(array1)
---------------------------------------
import numpy as np

array1 = np.array([1, 3, 5, 0, 2, 3, 4, 5, 13, 17, 23, 29])

array1.shape = (6, 2)
print(array1.shape)
print(array1)

array1.shape = (3, 4)
print(array1.shape)
print(array1)

array1.shape = (4, 3)
print(array1.shape)
print(array1)

#array1.shape = (4, 2) # Error New shape of the array must consist of same number of elements as that of original array
#print(array1.shape)
#print(array1)
-------------------------------------------------
import numpy as np

matrix1 = np.array([[3, 4, 5], [2, 6, 9]])
matrix2 = np.array([[3, 4], [3, 5], [2, 6]])

matrix3 = np.dot(matrix1, matrix2)

print('Matrix3=\n', matrix3)
(r1*c1, r1*c2)
(r2*c1, r2*c2)

(3*3 + 4*3 + 5*2), (3*4 + 4*5 + 5*6)
(2*3 + 6*3 + 9*2), (2*4 + 6*5 + 9*6)

(9+12+10), (12+20+30)
(6+18+18), (8+30+54)
[ (31, 62)
  (42, 92) ]
---------------------------------------------
import numpy as np

array = np.array([2, 4, 6, 8, 9, 19])

array2 = array + 5 # Broadcasting. Adding a scalar quantity to every element of the array

print(array)
print(array2)
------------------------------------
import numpy as np

array = np.array([[2, 4, 6, 8], [9, 19, 4, 10]])

array2 = array + 5 # Broadcasting. Adding a scalar quantity to every element of the array

print(array)
print(array2)
--------------------------------------
import numpy as np

matrix1 = np.array([[3, 3, 4], [2, 3, 9]])
matrix2 = np.array([[2, 5, 4], [2, 3, 19]])

sum_matrix = matrix1 + matrix2
difference_matrix = matrix1 - matrix2
product_matrix = matrix1 * matrix2
quotient_matrix = matrix1 / matrix2

print(sum_matrix)
print(difference_matrix)
print(product_matrix)
print(quotient_matrix)
------------------------------------------
import numpy as np
import scipy

array = np.array([[1, 1, 3, 3, 4, 4, 4, 5, 7, 7, 8, 9, 12]])

mean   = np.mean(array)
median = np.median(array)
mode   = scipy.mode(array)

print(f'Mean = ', mean)
print(f'Median = ', median)
print(f'Mode = ', mode)
---------------------------------------------
num = 50

while(num < 50):
	# do something
	pass
else:
	# do something else
	pass
---------------------------------------------
To enforce elements of same type to encapsulated, we must use array from the module array
array.array stores elements of same type only.
-----------------------------------------------------

{"airline" : "akasa", "source" : "chennai", "destination" : "jaipur", 
"duration" : 3.25, "fare" : 9200, "id" : 1}

---------------------------------------------------------------
import numpy as np
def f(x, y):
	return 10 * x + y

my_aaray = np.fromfunction(f, (5, 4), dtype = int)
print(my_aaray)
------------------------------------------------------
import numpy as np
def f(x, y):
	return 10 * x + y

my_aaray = np.fromfunction(f, (5, 4), dtype = int)

# Slicing the Numpy Arrays:
print(my_aaray[2, 3]) # my_array[2][3]
print(my_aaray[0:5, 1]) # From Row-1 to Row-5, print the 2nd element
print(my_aaray[ : , 1]) # From all rows, print 2nd element
print(my_aaray[1:3, : ]) # From Row-2 to Row-3, print all elements
-------------------------------------------------------
import numpy as np

import numpy as np
def f(x, y):
	return 10 * x + y

my_array = np.fromfunction(f, (5, 4), dtype = int)

print(f'Before:\n {my_array}')
#my_array[:, [0, -1]] = 0  #For all Rows, set 0 to 1st and last columns
my_array[[0, -1], :] = 0 #For 1st row and last row, set all elements to 0

#After:
print(f'After:\n {my_array}')
----------------------------------------------------
import numpy as np

import numpy as np
def f(x, y):
	return 10 * x + y

my_array = np.fromfunction(f, (5, 4), dtype = int)

my_array[[0, 1, -1], :] = 0 #For 1st row and last row, set all elements to 0

#After:
print(f'After:\n {my_array}')
---------------------------------------------------


---------------------------------------------------
5 3
1 3 5 7 9

9  7  5  3  1

b1 = 9 * (0+1) = 9
b2 = 7 * (0+1) = 7
b3 = [5 * (0+1)] + [3 * (1+1)] + [1 * (1+1)] = 5+6+2=13
total price = 9 + 7 + 13 = 29
------------------------------------
b1 = 9 * (0+1) = 9
b2 = [7 * (0+1)] + [5 * (1+1)] = 7+10 = 17
b3 = [3 * (0+1)] + [1 * (1+1)] = 3+ 2 =  5
total price = 9 + 17 + 5 = 31
---------------------------------------
b1 = [9 * (0+1)] + [7 * (1+1)] + [5 * (1+1)] = 9 + 14 + 10 = 33
b2 = [3 * (0+1)] = 3
b3 = [1 * (0+1)] = 1
total price = 33 + 3 + 1 = 37
------------------------------------------
b1 = [9 * (0+1)] + [7 * (1+1)] +  = 9 + 14 + 10 = 33
b2 = [5 * (1+1)] + [3 * (1+1)] = 3
b3 = [1 * (0+1)] = 1

total_price = [9 * (0+1)] + [7 * (0+1)] + [5 * (0+1)] + [3 * (1+1)] + [1 * (1+1)]
total_price = 1 + 5 + 6 + 9 + 14 = 29

-----------------------------
def get_minimum_cost(k, costs):
	costs.sort(reverse=True)
	total_min_cost = 0
	n = len(costs)
	for i in range(n):
		total_min_cost += (i // k + 1) * costs[i]

	return total_min_cost

print( get_minimum_cost(3, [9, 7, 5, 3, 1]))
------------------------------------
Minimum numbers of coins for gievn amount and given denominations:

def get_minimum_coins(amount, denominations):
	denominations.sort(reverse=True)
	number_of_coins = 0
	n = len(denominations)
	i = 0
	while amount > 0:
		number_of_coins += amount // denominations[i]
		amount = amount % denominations[i]
		i += 1
	return number_of_coins

print( get_minimum_coins(88, [1, 2, 5, 20]))
-------------------------------------------------------
import numpy as np

my_array = np.zeros((8, 8), dtype = int)
#my_array[1::2, ::2] = 8
#Starting from row-index-1 and there after, for all alternatives rows, and for all columns from index 0 and there after alternative columns, replace the cells with value 8
my_array[::2, 1::2] = 1
# Odd indexed-rows Even Indexed-Columns
print(my_array)
----------------------------------------------
import numpy as np

# nan is not a number

print(0 * np.nan)
print(np.nan == np.nan)
print(np.inf > np.nan)
print(np.nan - np.nan)
print(np.nan in set([np.nan]))
print(0.3 == 3 * 0.1)
-------------------------------------------------
list1 = [2, 3, 5]

string = ' '.join(map(str, list1)) # convert a list of items of tyep other than str into a string
print(string)
print(type(string))

list2 = ['23', '55', '67']
string = ' '.join(list2) 
print(string)
-------------------------------------------------
# Create a checkerboard 8x8 matrix using the tile function 
import numpy as np

#my_matrix = np.array([[0,1],[1,0]])
#print(my_matrix)

chess_board = np.tile( np.array([[1, 0],[0, 1]]), (4,4))
# chess_board = np.tile( np.array([['*', ' '],[' ', '*']]), (4,4))
#print('\n', chess_board)

list1 = []
for array in chess_board:
    list1 = list(array)
    string = ' '.join(map(str, list1))
    print(string)
------------------------------------------------
# Normalize a 5x5 random matrix
import numpy as np

my_array = np.random.random((5,5))
#print(my_array)

values = my_array - np.mean (my_array)
print('\n', values)

values = np.std (my_array)
print('\n', values)

my_array = (my_array - np.mean (my_array)) / (np.std (my_array))
print(my_array)